import { useNavigate } from "react-router-dom";
import { plan } from "../utils/plan";
import { useLocation } from "react-router-dom";
import ChapterCard from "../components/ChapterCard";

export default function DetailScreen() {
  const navigate = useNavigate();
  const location = useLocation();
  const selectedDay = location.state?.number;

  const dayText = plan[selectedDay]; // —Ç–µ–∫—Å—Ç –¥–Ω—è
  const dayNumber = selectedDay + 1; // –Ω–æ–º–µ—Ä –¥–Ω—è

  const handleGoBack = () => {
    navigate(-1); // üëà –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
    // –∏–ª–∏: navigate('/'); ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  };

  const chapters = parseReadingPlan(dayText);

  return (
    <div className="detail-view">
      <div className="detail-header">
        <button
          className="back-button"
          onClick={() => handleGoBack()}
          aria-label="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π"
          type="button"
        >
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M15 6L9 12L15 18"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        </button>
        <h2 className="detail-title">
          –î–µ–Ω—å {dayNumber}: {dayText}
        </h2>
        <div></div> {/* –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
      </div>
      <div >
        <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>
          {chapters.map((chapter, index) => (
            <ChapterCard key={index} chapter={chapter} onToggle={ () => {}} />
          ))}
        </div>
      </div>
    </div>
  );
}

function parseReadingPlan(text: string) {
  const result: string[] = [];

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º (–∫–Ω–∏–≥–∏)
  const bookRanges = text.split(",").map((part) => part.trim());

  for (const bookRange of bookRanges) {
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–ª–∞–≤
    const match = bookRange.match(/^([^\d]+)\s*(\d+)‚Äì(\d+)$/);

    if (!match) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: ${bookRange}`);
      continue;
    }

    const [, bookName, startStr, endStr] = match;
    const start = parseInt(startStr, 10);
    const end = parseInt(endStr, 10);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤—ã
    for (let i = start; i <= end; i++) {
      result.push(`${bookName.trim()} ${i}`);
    }
  }

  return result;
}
