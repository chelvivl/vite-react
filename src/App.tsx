// App.tsx ‚Äî —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
import { useState, useEffect, useRef } from 'react'; // üëà –¥–æ–±–∞–≤–ª–µ–Ω useRef
import { useBiblePlan } from './hooks/useBiblePlan';
import DayList from './components/DayList';
import Menu from './components/Menu';
import ToastNotification from './components/ToastNotification';
import { plan } from './utils/plan';

import './App.css';

function App() {
  const {
    state,
    startDay,
    toggleDay,
    resetProgress,
    continueFromDay,
    completedCount,
  } = useBiblePlan();

  const [menuOpen, setMenuOpen] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [toast, setToast] = useState({ show: false, message: '' });
  const [scrollToDay, setScrollToDay] = useState<number | null>(null);
  const [selectedDayIndex, setSelectedDayIndex] = useState<number | null>(null);
  const [isTransitioning, setIsTransitioning] = useState(false); // üëà –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

  // üëá —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
  const listRef = useRef<HTMLDivElement>(null);
  const scrollPosition = useRef(0);

  const showToast = (message: string) => {
    setToast({ show: true, message });
    setTimeout(() => {
      setToast({ show: false, message: '' });
    }, 2500);
  };

  const handleContinueFromDay = (day: number) => {
    continueFromDay(day);
    setModalOpen(false);
    showToast(`‚úÖ –î–µ–Ω—å ${day} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è!`);
    setScrollToDay(day);
  };

  useEffect(() => {
    if (scrollToDay !== null) {
      const el = document.getElementById(`day-${scrollToDay}`);
      if (el) {
        el.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      setScrollToDay(null);
    }
  }, [scrollToDay]);

  // üëá –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –ø–µ—Ä–µ–¥ —É—Ö–æ–¥–æ–º –≤ –¥–µ—Ç–∞–ª–∏
  const handleDayClick = (index: number) => {
    if (listRef.current) {
      scrollPosition.current = listRef.current.scrollTop;
    }
    setIsTransitioning(true);
    setTimeout(() => {
      setSelectedDayIndex(index);
      setIsTransitioning(false);
    }, 300); // –î–ª–∏–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ ‚Äî 300–º—Å
  };

  // üëá –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
  const handleBack = () => {
    setIsTransitioning(true);
    setTimeout(() => {
      setSelectedDayIndex(null);
      setIsTransitioning(false);
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ, –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
      setTimeout(() => {
        if (listRef.current) {
          listRef.current.scrollTop = scrollPosition.current;
        }
      }, 50);
    }, 300);
  };

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –¥–µ—Ç–∞–ª–µ–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  if (selectedDayIndex !== null) {
    const dayText = plan[selectedDayIndex];
    const dayNumber = selectedDayIndex + 1;

    return (
      <div className={`detail-view ${isTransitioning ? 'slide-in' : ''}`}>
        <div className="detail-header">
          <button
            className="back-button"
            onClick={handleBack} // üëà –∏—Å–ø–æ–ª—å–∑—É–µ–º handleBack
            aria-label="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π"
          >
            ‚Üê
          </button>
          <h2 className="detail-title">
            –î–µ–Ω—å {dayNumber}: {dayText}
          </h2>
          <div className="placeholder-right"></div>
        </div>

        <div className="detail-content">
          <p>üìñ –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–Ω—è {dayNumber}...</p>
        </div>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω ‚Äî –æ–±–µ—Ä–Ω—É—Ç –≤ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  return (
    <div className={`main-view ${isTransitioning ? 'slide-out' : ''}`}>
      <button className="menu-button" onClick={() => setMenuOpen(!menuOpen)}>
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M4 6H20M4 12H20M4 18H20" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
        </svg>
      </button>

      <h1>üìñ –ë–∏–±–ª–∏—è –∑–∞ 111 –¥–Ω–µ–π</h1>

      <div className="stats">
        –ü—Ä–æ–≥—Ä–µ—Å—Å: {completedCount} –∏–∑ {state.length}
      </div>

      {/* üëá –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ div —Å ref */}
      <div ref={listRef} id="list-wrapper" style={{ overflowY: 'auto', height: 'calc(100svh - 200px)' }}>
        <DayList
          state={state}
          startDay={startDay}
          onToggleDay={toggleDay}
          onDayClick={handleDayClick} // üëà –∏—Å–ø–æ–ª—å–∑—É–µ–º handleDayClick
        />
      </div>

      <Menu
        open={menuOpen}
        onClose={() => setMenuOpen(false)}
        onReset={resetProgress}
        onContinue={() => setModalOpen(true)}
        showToast={showToast}
      />

      {modalOpen && (
        <div className="modal-overlay active">
          <div className="modal">
            <h3>üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –¥–Ω—è...</h3>
            <p>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥–Ω—è, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —á–∏—Ç–∞–µ—à—å <strong>—Å–µ–≥–æ–¥–Ω—è</strong><br /><small>–í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã</small></p>
            <input
              type="number"
              id="day-input"
              min="1"
              max="111"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 33"
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  const target = e.target as HTMLInputElement;
                  const day = parseInt(target.value);
                  if (isNaN(day) || day < 1 || day > 111) {
                    showToast('‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è (1‚Äì111)');
                    return;
                  }
                  handleContinueFromDay(day);
                }
              }}
            />
            <div className="modal-buttons">
              <button className="modal-btn cancel" onClick={() => setModalOpen(false)}>
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="modal-btn confirm"
                onClick={() => {
                  const input = document.getElementById('day-input') as HTMLInputElement | null;
                  if (!input) {
                    showToast('‚ùå –≠–ª–µ–º–µ–Ω—Ç –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                  }
                  const day = parseInt(input.value);
                  if (isNaN(day) || day < 1 || day > 111) {
                    showToast('‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è (1‚Äì111)');
                    return;
                  }
                  handleContinueFromDay(day);
                }}
              >
                –ü—Ä–∏–º–µ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
      <ToastNotification show={toast.show} message={toast.message} />
    </div>
  );
}

export default App;